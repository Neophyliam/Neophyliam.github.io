<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Neo的博客</title>
    <link>https://neothenil.github.io/zh/posts/</link>
    <description>Recent content in Posts on Neo的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 26 Jan 2020 23:35:00 +0800</lastBuildDate>
    
	<atom:link href="https://neothenil.github.io/zh/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[译]为什么需要单元测试以及如何让其为你所用</title>
      <link>https://neothenil.github.io/zh/posts/why_unit_tests/</link>
      <pubDate>Sun, 26 Jan 2020 23:35:00 +0800</pubDate>
      
      <guid>https://neothenil.github.io/zh/posts/why_unit_tests/</guid>
      <description>译序 自2018年以来，我从事了有三四个项目的开发。 有的项目彻彻底底地失败了;有的项目中的程序中规中矩，能够正常运行; 另外还有一些项目中，我尝试使用了刚刚了解到的测试驱动开发（TDD)。 刚刚开始尝试测试驱动开发感觉很别扭，没有对应的代码，根本不知道该如何写测试。 还有一些测试的技巧也一概不知。就算如此，按照TDD的流程走了下来之后， 发现最终得到的代码结构比其他项目中的代码结构要清晰许多。 仅仅是按照TDD的流程磕磕绊绊地走下来，甚至有时候并没有完全按照这一流程的要求来操作， 就能得到结构上更清晰的代码，这看起来就足够让人称奇了。
我初次了解TDD并不是通过Learn Go with tests 这本由社区驱动的学习Go语言的书，这本书是在我已经进行了一些笨拙的对TDD的尝试之后才发现的。 也许是时机碰的巧吧，在这个时间点上遇到了这本书，遇到了这篇文章，让我产生了很大的共鸣， 于是就想把它翻译下来，分享给更多的人。
原文链接：Learn Go with tests
 这里是我讨论此话题的一个视频链接。
如果你对视频形式不感兴趣，这里是视频内容的文字版本。
软件 软件必然是会改变的，这也是为什么它被称为 软 件的原因。相较于硬件，软件更具有延展性。 对公司来讲，一个卓越的开发团队应该是其莫大的财富，这样的团队能够编写出随商业模式不断演变的系统， 从而持续地展现它的价值。
那么我们为什么难以做好软件开发的工作呢？有多少项目曾经彻头彻尾地失败， 或者是变得“过时”从而不得不完全重写？（这样的重写常常也以失败告终！）
为什么一个软件系统又会失败呢？难道就不能一直改动直到它能正常工作吗？这不是我们所承诺的吗！
许多人选择Go语言来构建系统，因为它做出了一系列我们希望能使它更加经得起历史考验的决定。
 相比于我之前使用Scala的经历（我在这里 描述了它是如何有足够长的绳子来吊死你自己），Go只有25个关键字，许多系统都可以使用标准库， 再加上一些其他的小库来构建。使用Go，你能够希望自己写的代码过了6个月之后仍然能顺畅地阅读。 相比于其他语言，具有一流的测试、性能分析、静态检查和构建工具。 标准库非常优秀。 对于紧凑的反馈循环来说具有非常快的编译速度。 Go语言向后兼容的承诺。即使Go在将来可能会加入范型及其他一些特性， 但是设计者们承诺即使是5年前写的Go代码仍将正确编译。 我之前经常要花费好几周的时间来把一个项目从Scala 2.8升级到2.10。  即使有了所有这些优秀的特性，我们仍然会写出糟糕的系统，所以我们应该回顾一下历史， 去了解软件工程中不管使用的语言有多耀眼（或者多不耀眼）都适用的课程。
1974年，一个叫做Manny Lehman 的聪明的软件工程师写下了有关软件演化的Lehman定律。</description>
    </item>
    
    <item>
      <title>使用Mock对象</title>
      <link>https://neothenil.github.io/zh/posts/cheat_with_mock/</link>
      <pubDate>Sat, 19 Oct 2019 17:38:37 +0800</pubDate>
      
      <guid>https://neothenil.github.io/zh/posts/cheat_with_mock/</guid>
      <description>这篇文章是对Uncle Bob的两篇关于mock的文章的总结。 一篇被命名为&amp;rdquo;The Little Mocker&amp;rdquo;，展示了各种不同的Mock对象。另一篇文章 告诉我们应该在什么情况下使用 Mock对象。尽管在The Little Mocker中，Uncle Bob指出了我们通常所说的&amp;rdquo;mock&amp;rdquo;指的其实是Test Double，在这篇文章中我们还是使用通常所说的&amp;rdquo;mock&amp;rdquo;的含义。
什么是Mock对象？ Mock对象是一些用来模仿真实对象行为的模拟对象，它们通常在单元测试中用来测试一些 依赖于其他对象的对象。使用Mock对象，我们可以测试代码中的某一个特定逻辑，而不会 产生其他一些副作用，例如读取文件或连接服务器。在我看来，Mock对象的行为就像是在 欺骗被测试的代码一样，但是这里的欺骗是出于好意的，比如想要消除单元测试中一些 操作的长延迟或不确定的因素。
Mock对象的不同类型 1. Dummy 为了方便起见，这里直接使用了原文中的代码片段。假如有个System类：
public class System { public System(Authorizer authorizer) { this.authorizer = authorizer; } public int loginCount() { // returns number of logged in users. } }  其中Authorizer被定义为一个接口：
interface Authorizer { public Boolean authorize(String username, String password); }  在有些情况下，系统本身就会有几种不同的Authorizer，这自然会让Authorizer被 定义为一个接口。但是也有一些情况下，定义接口就是专门为了使用Mock对象进行测试。</description>
    </item>
    
    <item>
      <title>如何在Linux系统下使用shadowsocks</title>
      <link>https://neothenil.github.io/zh/posts/ss-settings/</link>
      <pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://neothenil.github.io/zh/posts/ss-settings/</guid>
      <description>1. 安装shadowsocks客户端 sudo pip install shadowsocks
2. 修改shadowsocks客户端代码  这一步可以先跳过，如果之后运行sslocal命令报错再返回来修改。通常在ARM架构的CPU下会出现 这个问题。
 把openssl.py文件中出现&amp;rdquo;libcrypto.EVP_CIPHER_CTX_cleanup&amp;rdquo;的地方全部替换为 &amp;ldquo;libcrypto.EVP_CIPHER_CTX_reset&amp;rdquo;，这个文件所在的位置类似于 /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py。
3. 为shadowsocks编写配置文件 我把这个文件保存在~/.config目录下，并命名为shadowsocks.json。其中的内容有如下格式：
{ &amp;quot;server&amp;quot;: &amp;quot;www.example.com&amp;quot;, &amp;quot;server_port&amp;quot;: 88888, &amp;quot;local_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;, &amp;quot;local_port&amp;quot;: 1080, &amp;quot;password&amp;quot;: &amp;quot;secret&amp;quot;, &amp;quot;timeout&amp;quot;: 600, &amp;quot;method&amp;quot;: &amp;quot;aes-256-cfb&amp;quot;, &amp;quot;fast_open&amp;quot;: false, &amp;quot;workers&amp;quot;: 1 }  4. 安装polipo以使使用http(s)协议的应用使用shadowsocks sudo apt-get install polipo
5. 更改polipo的配置文件 将/etc/polipo/config文件更改为如下内容：
logSyslog = false logFile = /var/log/polipo/polipo.</description>
    </item>
    
  </channel>
</rss>