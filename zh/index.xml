<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Neo的博客</title>
    <link>https://neothenil.github.io/zh/</link>
    <description>Recent content on Neo的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 19 Oct 2019 17:38:37 +0800</lastBuildDate>
    
	<atom:link href="https://neothenil.github.io/zh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用Mock对象</title>
      <link>https://neothenil.github.io/zh/posts/cheat_with_mock/</link>
      <pubDate>Sat, 19 Oct 2019 17:38:37 +0800</pubDate>
      
      <guid>https://neothenil.github.io/zh/posts/cheat_with_mock/</guid>
      <description>这篇文章是对Uncle Bob的两篇关于mock的文章的总结。 一篇被命名为&amp;rdquo;The Little Mocker&amp;rdquo;，展示了各种不同的Mock对象。另一篇文章 告诉我们应该在什么情况下使用 Mock对象。尽管在The Little Mocker中，Uncle Bob指出了我们通常所说的&amp;rdquo;mock&amp;rdquo;指的其实是Test Double，在这篇文章中我们还是使用通常所说的&amp;rdquo;mock&amp;rdquo;的含义。
什么是Mock对象？ Mock对象是一些用来模仿真实对象行为的模拟对象，它们通常在单元测试中用来测试一些 依赖于其他对象的对象。使用Mock对象，我们可以测试代码中的某一个特定逻辑，而不会 产生其他一些副作用，例如读取文件或连接服务器。在我看来，Mock对象的行为就像是在 欺骗被测试的代码一样，但是这里的欺骗是出于好意的，比如想要消除单元测试中一些 操作的长延迟或不确定的因素。
Mock对象的不同类型 1. Dummy 为了方便起见，这里直接使用了原文中的代码片段。假如有个System类：
public class System { public System(Authorizer authorizer) { this.authorizer = authorizer; } public int loginCount() { // returns number of logged in users. } }  其中Authorizer被定义为一个接口：
interface Authorizer { public Boolean authorize(String username, String password); }  在有些情况下，系统本身就会有几种不同的Authorizer，这自然会让Authorizer被 定义为一个接口。但是也有一些情况下，定义接口就是专门为了使用Mock对象进行测试。</description>
    </item>
    
    <item>
      <title>如何在Linux系统下使用shadowsocks</title>
      <link>https://neothenil.github.io/zh/posts/ss-settings/</link>
      <pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://neothenil.github.io/zh/posts/ss-settings/</guid>
      <description>1. 安装shadowsocks客户端 sudo pip install shadowsocks
2. 修改shadowsocks客户端代码  这一步可以先跳过，如果之后运行sslocal命令报错再返回来修改。通常在ARM架构的CPU下会出现 这个问题。
 把openssl.py文件中出现&amp;rdquo;libcrypto.EVP_CIPHER_CTX_cleanup&amp;rdquo;的地方全部替换为 &amp;ldquo;libcrypto.EVP_CIPHER_CTX_reset&amp;rdquo;，这个文件所在的位置类似于 /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py。
3. 为shadowsocks编写配置文件 我把这个文件保存在~/.config目录下，并命名为shadowsocks.json。其中的内容有如下格式：
{ &amp;quot;server&amp;quot;: &amp;quot;www.example.com&amp;quot;, &amp;quot;server_port&amp;quot;: 88888, &amp;quot;local_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;, &amp;quot;local_port&amp;quot;: 1080, &amp;quot;password&amp;quot;: &amp;quot;secret&amp;quot;, &amp;quot;timeout&amp;quot;: 600, &amp;quot;method&amp;quot;: &amp;quot;aes-256-cfb&amp;quot;, &amp;quot;fast_open&amp;quot;: false, &amp;quot;workers&amp;quot;: 1 }  4. 安装polipo以使使用http(s)协议的应用使用shadowsocks sudo apt-get install polipo
5. 更改polipo的配置文件 将/etc/polipo/config文件更改为如下内容：
logSyslog = false logFile = /var/log/polipo/polipo.</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://neothenil.github.io/zh/about/</link>
      <pubDate>Sun, 07 Jul 2019 23:17:05 +0800</pubDate>
      
      <guid>https://neothenil.github.io/zh/about/</guid>
      <description>本人目前是一名就读于西安交大核科学与核技术专业的研究生。沉迷于编程，痴迷于由软件 构造起来的抽象世界。虽然编程水平很菜，但是并不影响我对编程的喜爱，而且知道自己 还有很多要学习的东西本身就让人兴奋。建立这个个人网站就是为了记录我的学习过程 以及分享一些有趣的知识和观点。</description>
    </item>
    
  </channel>
</rss>